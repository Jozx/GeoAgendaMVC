@model GeoAgenda.Models.Cliente

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>
<div>
    <h4>Cliente</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.sucursal.Direccion)
            
        </dt>

        <dd>
            @Html.DisplayFor(model => model.sucursal.Direccion)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RazonSocial)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RazonSocial)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RUC)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RUC)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DV)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DV)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Estado)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Estado)
        </dd>

    </dl>
</div>

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>


<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>
<br />
<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 550px;"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    <section class="scripts">

        <script type="text/javascript">

    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Asuncion = new google.maps.LatLng(@Model.sucursal.latitudSucursal, @Model.sucursal.longitudSucursal);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 15,
            center: Asuncion,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // a sample list of JSON encoded data of places to visit in Asuncion
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
        var data = [
                  { "Id": 1, "PlaceName": "Local", "GeoLat": @Model.sucursal.latitudSucursal.ToString(), "GeoLong": @Model.sucursal.longitudSucursal.ToString()},

               ];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLat, item.GeoLong),
                'map': map,
                'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.PlaceName + "</div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }


        </script>
    </section>
}


<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.IdCliente }) |
    @Html.ActionLink("Back to List", "Index")
</p>
